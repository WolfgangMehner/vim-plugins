== LIST: C_StandardLibs == list ==
 'assert.h'     , 
 'complex.h'    , 
 'ctype.h'      , 
 'errno.h'      , 
 'fenv.h'       , 
 'float.h'      , 
 'inttypes.h'   , 
 'iso646.h'     , 
 'limits.h'     , 
 'locale.h'     , 
 'math.h'       , 
 'setjmp.h'     , 
 'signal.h'     , 
 'stdalign.h'   , 
 'stdarg.h'     , 
 'stdatomic.h'  , 
 'stdbool.h'    , 
 'stddef.h'     , 
 'stdint.h'     , 
 'stdio.h'      , 
 'stdlib.h'     , 
 'stdnoreturn.h', 
 'string.h'     , 
 'tgmath.h'     , 
 'threads.h'    , 
 'time.h'       , 
 'uchar.h'      , 
 'unistd.h'     , 
 'wchar.h'      , 
 'wctype.h'     , 
== ENDLIST ==

== Preprocessor.include std lib header == expandmenu, append, map:pih, shortcut:s ==
|PickList( 'Std. Libs', 'C_StandardLibs' )|
#include <|PICK|><CURSOR>
== ENDTEMPLATE ==

== LIST: C_PosixHeader == list ==
 'aio.h' ,
 'arpa/inet.h' ,
 'assert.h' ,
 'complex.h' ,
 'cpio.h' ,
 'ctype.h' ,
 'dirent.h' ,
 'dlfcn.h' ,
 'errno.h' ,
 'fcntl.h' ,
 'fenv.h' ,
 'float.h' ,
 'fmtmsg.h' ,
 'fnmatch.h' ,
 'ftw.h' ,
 'glob.h' ,
 'grp.h' ,
 'iconv.h' ,
 'inttypes.h' ,
 'iso646.h' ,
 'langinfo.h' ,
 'libgen.h' ,
 'limits.h' ,
 'locale.h' ,
 'math.h' ,
 'monetary.h' ,
 'mqueue.h' ,
 'ndbm.h' ,
 'net/if.h' ,
 'netdb.h' ,
 'netinet/in.h' ,
 'netinet/tcp.h' ,
 'nl_types.h' ,
 'poll.h' ,
 'pthread.h' ,
 'pwd.h' ,
 'regex.h' ,
 'sched.h' ,
 'search.h' ,
 'semaphore.h' ,
 'setjmp.h' ,
 'signal.h' ,
 'spawn.h' ,
 'stdarg.h' ,
 'stdbool.h' ,
 'stddef.h' ,
 'stdint.h' ,
 'stdio.h' ,
 'stdlib.h' ,
 'string.h' ,
 'strings.h' ,
 'stropts.h' ,
 'sys/ipc.h' ,
 'sys/mman.h' ,
 'sys/msg.h' ,
 'sys/resource.h' ,
 'sys/select.h' ,
 'sys/sem.h' ,
 'sys/shm.h' ,
 'sys/socket.h' ,
 'sys/stat.h' ,
 'sys/statvfs.h' ,
 'sys/time.h' ,
 'sys/times.h' ,
 'sys/types.h' ,
 'sys/uio.h' ,
 'sys/un.h' ,
 'sys/utsname.h' ,
 'sys/wait.h' ,
 'syslog.h' ,
 'tar.h' ,
 'termios.h' ,
 'tgmath.h' ,
 'time.h' ,
 'trace.h' ,
 'ulimit.h' ,
 'unistd.h' ,
 'utime.h' ,
 'utmpx.h' ,
 'wchar.h' ,
 'wctype.h' ,
 'wordexp.h' ,
== ENDLIST ==

== Preprocessor.include POSIX header == expandmenu, append, map:piph, shortcut:p ==
|PickList( 'Std. Libs', 'C_PosixHeader' )|
#include <|PICK|><CURSOR>
== ENDTEMPLATE ==

§-------------------------------------------------------------------------
== Preprocessor.include-global == map:pg, shortcut:g ==
#include <<CURSOR>>
§-------------------------------------------------------------------------
== Preprocessor.include-local == map:pl, shortcut:l ==
#include "<CURSOR>"
§-------------------------------------------------------------------------
== Preprocessor.define == map:pd, shortcut:d ==
#define	<CURSOR>			/*  */
§-------------------------------------------------------------------------
== Preprocessor.undefine == map:pu, shortcut:u ==
#undef	<CURSOR>			/*  */
§-------------------------------------------------------------------------
== Preprocessor.if-endif == map:pif, shortcut:i ==
#if  |?CONDITION:u|
<CURSOR><SPLIT>
#endif     /* -----  |CONDITION|  ----- */
§-------------------------------------------------------------------------
== Preprocessor.if-else-endif == map:pie, shortcut:i ==
#if  |?CONDITION:u|
<CURSOR><SPLIT>
#else      /* -----  not |CONDITION|  ----- */
<+ELSE PART+>
#endif     /* -----  not |CONDITION|  ----- */
§-------------------------------------------------------------------------
== Preprocessor.ifdef-else-endif == map:pid, shortcut:f ==
#ifdef  |?CONDITION:u|
<CURSOR><SPLIT>
#else      /* -----  not |CONDITION|  ----- */
<+ELSE PART+>
#endif     /* -----  not |CONDITION|  ----- */
§-------------------------------------------------------------------------
== Preprocessor.ifndef-else-endif == map:pin, shortcut:n ==
#ifndef  |?CONDITION:u|
<CURSOR><SPLIT>
#else      /* -----  not |CONDITION|  ----- */
<+ELSE PART+>
#endif     /* -----  not |CONDITION|  ----- */
§-------------------------------------------------------------------------
== Preprocessor.ifndef-def-endif == map:pind, shortcut:e ==
#ifndef  |?BASENAME:L|_INC
#define  |BASENAME|_INC
<CURSOR><SPLIT>
#endif   /* ----- #ifndef |BASENAME|_INC  ----- */
§-------------------------------------------------------------------------
== Preprocessor.error == map:pe, shortcut:o ==
#error	"<CURSOR>"			/*  */
§-------------------------------------------------------------------------
== Preprocessor.line == map:pli, shortcut:l ==
#line	<CURSOR>			/*  */
§-------------------------------------------------------------------------
== Preprocessor.pragma == map:pp, shortcut:p ==
#pragma	<CURSOR>			/*  */
§-------------------------------------------------------------------------
== Preprocessor.warning == map:pw, shortcut:w ==
#warning	<CURSOR>			/*  */
§-------------------------------------------------------------------------
